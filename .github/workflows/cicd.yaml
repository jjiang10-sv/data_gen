name: Build and Push Docker Image

# Trigger the pipeline
on:
  workflow_dispatch: # manual trigger
  push:
    branches:
      - test
      - dev
      - main

# Define pipeline jobs
jobs:
  build-image:
    runs-on: ubuntu-latest

    steps:
      # Checkout only the latest first commit
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # Set up QEMU for multi-platform Docker builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # Set up Docker Buildx for multi-platform support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Cache Docker layers for backend
      - name: Cache Docker layers - backend
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-backend
          key: ${{ runner.os }}-buildx-backend-${{ hashFiles('**/Dockerfile.backend', '**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-backend-

      # Build and push backend
      - name: Build and push Docker images - backend
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          no-cache: true
          context: .
          dockerfile: Dockerfile.backend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/starfish-backend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/starfish-backend:latest
          cache-from: type=local,src=/tmp/.buildx-cache-backend
          cache-to: type=local,dest=/tmp/.buildx-cache-backend,mode=max

      # Cache Docker layers for frontend
      - name: Cache Docker layers - frontend
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-frontend
          key: ${{ runner.os }}-buildx-frontend-${{ hashFiles('**/Dockerfile.frontend', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      # Build and push frontend
      - name: Build and push Docker images - frontend
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          no-cache: true
          context: .
          dockerfile: Dockerfile.frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/starfish-frontend:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/starfish-frontend:latest
          cache-from: type=local,src=/tmp/.buildx-cache-frontend
          cache-to: type=local,dest=/tmp/.buildx-cache-frontend,mode=max

  # deploy:
  #   needs: build-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-west-1

  #     # Update kubeconfig to the correct EKS cluster based on the branch
  #     - name: Update kubeconfig
  #       run: |
  #         if [[ "${{ github.ref_name }}" == "main" ]]; then
  #           aws eks update-kubeconfig --name Prod --region us-west-1
  #         elif [[ "${{ github.ref_name }}" == "dev" ]]; then
  #           aws eks update-kubeconfig --name Dev --region us-west-1
  #         elif [[ "${{ github.ref_name }}" == "test" ]]; then
  #           aws eks update-kubeconfig --name test --region us-west-1
  #         fi

  #     # Deploy to EKS
  #     - name: Deploy to EKS
  #       run: |
  #         kubectl rollout restart deployment ai-agent-service --namespace intersoul
          